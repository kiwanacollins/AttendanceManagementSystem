/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forms;

import dao.ConnectoinProvider;
import java.awt.Color;
import java.awt.List;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import javax.swing.BorderFactory;
import utility.BDUtility;
import java.sql.*;
import java.text.DateFormat;
import java.time.DayOfWeek;
import java.util.HashSet;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;





/**
 *
 * @author USER
 */
public class ViewAttendance extends javax.swing.JFrame {

    /**
     * Creates new form ViewAttendance
     */
    public ViewAttendance() {
        initComponents();
        BDUtility.setImage(this, "images/abc1.jpg", 1101, 501);
        this.getRootPane().setBorder(BorderFactory.createMatteBorder(4, 4, 4, 4, Color.BLACK));
       

        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dateChooserDialog1 = new datechooser.beans.DateChooserDialog();
        dateChooserDialog2 = new datechooser.beans.DateChooserDialog();
        btnExit = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        userTable = new javax.swing.JTable();
        dateChooserFrom = new datechooser.beans.DateChooserCombo();
        dateChooserTo = new datechooser.beans.DateChooserCombo();
        txtSearch = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        absentLBL = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        presentLBL = new javax.swing.JLabel();
        lblPresent = new javax.swing.JLabel();
        lblAbsent = new javax.swing.JLabel();
        checkBoxContact = new javax.swing.JCheckBox();
        checkBoxAddress = new javax.swing.JCheckBox();
        checkBoxState = new javax.swing.JCheckBox();
        checkBoxCountry = new javax.swing.JCheckBox();
        checkBoxUniqueRegId = new javax.swing.JCheckBox();
        btnResetFilters = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        btnExit.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnExit.setText("X");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setText("Attendance Track");

        userTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(userTable);

        dateChooserFrom.setFieldFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 14));

        dateChooserTo.setFieldFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 14));

        txtSearch.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Search");

        absentLBL.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        absentLBL.setText("Absent");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("To");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("On / From");

        presentLBL.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        presentLBL.setText("Present");

        lblPresent.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        lblPresent.setForeground(new java.awt.Color(153, 255, 153));
        lblPresent.setText("------------");

        lblAbsent.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        lblAbsent.setForeground(new java.awt.Color(255, 51, 51));
        lblAbsent.setText("------------");

        checkBoxContact.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        checkBoxContact.setText("Contact");

        checkBoxAddress.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        checkBoxAddress.setText("Address");
        checkBoxAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxAddressActionPerformed(evt);
            }
        });

        checkBoxState.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        checkBoxState.setText("State");

        checkBoxCountry.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        checkBoxCountry.setText("Country");
        checkBoxCountry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxCountryActionPerformed(evt);
            }
        });

        checkBoxUniqueRegId.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        checkBoxUniqueRegId.setText("Unique Reg ID");
        checkBoxUniqueRegId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxUniqueRegIdActionPerformed(evt);
            }
        });

        btnResetFilters.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnResetFilters.setText("Reset Filters");
        btnResetFilters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetFiltersActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(checkBoxContact, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(presentLBL, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                            .addComponent(absentLBL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPresent, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblAbsent, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 647, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(70, 70, 70))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(dateChooserFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(94, 94, 94)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(dateChooserTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(29, 29, 29)
                                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(23, 23, 23)))
                        .addGap(42, 42, 42))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(checkBoxUniqueRegId)
                                .addGap(915, 915, 915))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnResetFilters)
                                .addGap(737, 737, 737))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(checkBoxAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(checkBoxState, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(checkBoxCountry, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(951, 951, 951))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(403, 403, 403))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(btnExit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(36, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(presentLBL)
                            .addComponent(lblPresent))
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(absentLBL)
                        .addComponent(lblAbsent))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(dateChooserTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(dateChooserFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(checkBoxContact)
                        .addGap(34, 34, 34)
                        .addComponent(checkBoxAddress)
                        .addGap(34, 34, 34)
                        .addComponent(checkBoxState)
                        .addGap(34, 34, 34)
                        .addComponent(checkBoxCountry)
                        .addGap(34, 34, 34)
                        .addComponent(checkBoxUniqueRegId))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnResetFilters, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(26, 26, 26)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(29, 29, 29))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnExitActionPerformed

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchActionPerformed

    private void checkBoxCountryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxCountryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkBoxCountryActionPerformed

    private void checkBoxUniqueRegIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxUniqueRegIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkBoxUniqueRegIdActionPerformed

    private void checkBoxAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxAddressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkBoxAddressActionPerformed

    private void btnResetFiltersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetFiltersActionPerformed
        txtSearch.setText("");
        checkBoxContact.setSelected(false);
        checkBoxAddress.setSelected(false);
        checkBoxState.setSelected(false);
        checkBoxCountry.setSelected(false);
        checkBoxUniqueRegId.setSelected(false);
        loadDataInTable();

    }//GEN-LAST:event_btnResetFiltersActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
       loadDataInTable(); 
    }//GEN-LAST:event_formComponentShown

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewAttendance().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel absentLBL;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnResetFilters;
    private javax.swing.JCheckBox checkBoxAddress;
    private javax.swing.JCheckBox checkBoxContact;
    private javax.swing.JCheckBox checkBoxCountry;
    private javax.swing.JCheckBox checkBoxState;
    private javax.swing.JCheckBox checkBoxUniqueRegId;
    private datechooser.beans.DateChooserDialog dateChooserDialog1;
    private datechooser.beans.DateChooserDialog dateChooserDialog2;
    private datechooser.beans.DateChooserCombo dateChooserFrom;
    private datechooser.beans.DateChooserCombo dateChooserTo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAbsent;
    private javax.swing.JLabel lblPresent;
    private javax.swing.JLabel presentLBL;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTable userTable;
    // End of variables declaration//GEN-END:variables

    private void loadDataInTable() {

        String searchText = txtSearch.getText().toString();
        DateFormat fromDateFromCal = dateChooserFrom.getDateFormat();
        LocalDate fromDate = null;
        if (fromDateFromCal != null) {
            fromDate = fromDateFromCal.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        }

        Date toDateFromCal = dateChooserTo.getDate();
        LocalDate toDate = null;
        if (toDateFromCal != null) {
            toDate = toDateFromCal.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        }
        
        Long daysBetween = null;
        if(fromDate != null && toDate != null) {
            daysBetween = countWeekdays(fromDate, toDate);
        }

        Boolean contactIncluded = checkBoxContact.isSelected();
        Boolean addressIncluded = checkBoxAddress.isSelected();
        Boolean stateIncluded = checkBoxState.isSelected();
        Boolean countryIncluded = checkBoxCountry.isSelected();
        Boolean uniqueRegIdIncluded = checkBoxUniqueRegId.isSelected();
        String sqlQuery = "SELECT ud.id, ud.name, ud.gender, ud.email, ua.date, ua.checkin, ua.checkout, ua.workduration";
        if (contactIncluded) {
            columns.add("Contact");
            sqlQuery += ", ud.contact";
        }
        if (addressIncluded) {
            columns.add("Address");
            sqlQuery += ", ud.address";
        }

        if (stateIncluded) {
            columns.add("State");
            sqlQuery += ", ud.state";
        }
        if (countryIncluded) {
            columns.add("Country");
            sqlQuery += ", ud.country";
        }
        if (uniqueRegIdIncluded) {
            columns.add("Unique Reg Id");
            sqlQuery += ", ud.uniqueregid";
        }

        sqlQuery += " FROM userdetails AS ud INNER JOIN userattendance AS ua ON ud.id = ua.userid ";
        if (searchText != null) {
            sqlQuery += " where (ud.name like '%" + searchText + "%' or ud.email like '%" + searchText + "%')";
        }
        if (fromDate != null && toDate != null) {
            sqlQuery += " AND ua.date BETWEEN '" + fromDate + "' AND '" + toDate + "'";
        } else if (fromDate != null) {
            sqlQuery += " and ua.date = '" + fromDate + "'";
        } else {
            if (fromDate != null && toDate != null) {
                sqlQuery += " WHERE ua.date BETWEEN '" + fromDate + "' AND '" + toDate + "'";
            } else if (fromDate != null) {
                sqlQuery += " where na.date '" + fromDate + "'";
            }
        }
        
      DefaultTableModel model = new DefaultTableModel();
model.setColumnIdentifiers(columns.toArray());
userTable.setModel(model);
try (Connection con = ConnectoinProvider.getCon();
     Statement st = con.createStatement();
     ResultSet rs = st.executeQuery(sqlQuery)) {

    int presentCount = 0;
    int absentCount = 0;
    Set<String> emailList = new HashSet<>();

    while (rs.next()) {
        List<Object> row = new ArrayList<>();
        row.add(rs.getString("id"));
        row.add(rs.getString("name"));
        row.add(rs.getString("gender"));
        row.add(rs.getString("email"));
        emailList.add(rs.getString("email"));
        row.add(rs.getString("date"));
        row.add(rs.getString("checkin"));
        row.add(rs.getString("checkout"));
        row.add(rs.getString("workduration"));
        if (contactIncluded) {
            row.add(rs.getString("contact"));
        }
        if (addressIncluded) {
            row.add(rs.getString("address"));
        }
        if (stateIncluded) {
            row.add(rs.getString("state"));
        }
        if (countryIncluded) {
            row.add(rs.getString("country"));
        }
        if (uniqueRegIdIncluded) {
            row.add(rs.getString("uniqueregid"));
        }
        if (rs.getString("checkout") == null) {
            absentCount++;
        } else {
            presentCount++;
        }
        model.addRow(row.toArray());
    }

    if (emailList.size() == 1) {
        lblPresent.setVisible(true);
        lblAbsent.setVisible(true);
        presentLBL.setVisible(true);
        absentLBL.setVisible(true);
        lblPresent.setText(String.valueOf(presentCount));
        if (daysBetween != null && daysBetween > 0) {
            absentCount = (int) (daysBetween - presentCount);
        }
        lblAbsent.setText(String.valueOf(absentCount));
    } else {
        lblPresent.setVisible(false);
        lblAbsent.setVisible(false);
        presentLBL.setVisible(false);
        absentLBL.setVisible(false);
    }

} catch (SQLException ex) {
    JOptionPane.showMessageDialog(null, "Something went wrong: " + ex.getMessage());
} catch (Exception ex) {
    JOptionPane.showMessageDialog(null, "Something went wrong");
}


        
    }
    private Long countWeekdays(LocalDate start, LocalDate end) {
        long count = 0;
        LocalDate date = start;
        while (date.isBefore(end) || date.equals(end)) {
            if (!(date.getDayOfWeek() == DayOfWeek.SATURDAY || date.getDayOfWeek() == DayOfWeek.SUNDAY)) {
                count++;
            }
            date = date.plusDays(1);
        }
        return count;
    }

      

    }

